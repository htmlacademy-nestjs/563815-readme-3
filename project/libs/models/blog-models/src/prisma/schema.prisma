// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DatabasePost {
  id               Int                @id @default(autoincrement())
  title            String             @default("")
  author           DatabaseAuthor     @relation(name: "author", fields: [authorId], references: [id], map: "post_author")
  authorId         Int                @map("author_id")
  originalAuthor   DatabaseAuthor?    @relation(name: "original_author", fields: [originalAuthorId], references: [id], map: "post_original_author")
  originalAuthorId Int?               @map("original_author_id")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  publishedAt      DateTime           @default(now()) @map("published_at")
  status           DatabasePostStatus @default(draft)
  isRepost         Boolean            @default(false) @map("is_repost")
  originalPostId   Int?               @map("original_post_id")
  tags             DatabaseTag[]
  comments         DatabaseComment[]
  quoteAuthor      String?            @map("quote_author")
  text             String?            @default("")
  announcement     String?            @default("")
  type             DatabasePostType   @default(text)
  externalUrl      String?            @map("external_url")
  DatabaseLike     DatabaseLike[]

  @@map("posts")
}

model DatabaseTag {
  id    Int            @id @default(autoincrement())
  name  String         @default("")
  posts DatabasePost[]

  @@map("tags")
}

model DatabaseAuthor {
  id            Int            @id @default(autoincrement())
  name          String         @default("")
  allPosts      DatabasePost[] @relation(name: "author")
  originalPosts DatabasePost[] @relation(name: "original_author")
  DatabaseLike  DatabaseLike[]

  @@map("authors")
}

model DatabaseComment {
  id        Int            @id @default(autoincrement()) @map("comment_id")
  message   String
  userId    Int            @map("user_id")
  posts     DatabasePost[]
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")

  @@map("comments")
}

model DatabaseLike {
  id        Int            @id @default(autoincrement())
  user      DatabaseAuthor @relation(fields: [userId], references: [id])
  userId    Int            @map("user_id")
  post      DatabasePost   @relation(fields: [postId], references: [id])
  postId    Int            @map("post_id")
  createdAt DateTime       @default(now()) @map("created_at")

  @@unique([userId, postId])
  @@map("likes")
}

enum DatabasePostStatus {
  draft
  published
  archived
}

enum DatabasePostType {
  video
  text
  quote
  photo
  link
}
